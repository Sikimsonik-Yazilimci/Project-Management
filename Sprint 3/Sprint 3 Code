
import time
import random

# creating the variables/lists/dictionaries

menu_options = ['1', '2', '3', '4', '5']  # expected inputs in menus

points = 0

# dictionaries storing the data from the games in the following format:
# {game #: [{# of correct answers: # of questions}, total game duration, duration/question]}
easy_game_data = {}
hard_game_data = {}
mixed_game_data = {}

# variables with the number of games played (for each difficulty level)
easy_game_count = 0
hard_game_count = 0
mixed_game_count = 0

# Dictionary with the number of incorrect answers for each number
# It is used to show the teacher how many incorrect answer the student
# has with each multiplied answer
incorrect_answer_count = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0}

# Constants (number of questions)
SHORT_GAME = 10
LONG_GAME = 20


def space(number_of_lines):
    """
    Function has 1 for loop that prints a certain (inputted) no. of lines
    """
    for i in range(number_of_lines):
        print("\n")


def menu():
    """
    Prints the menu
    """
    space(10000)

    menu_items = ["Play Game",
                  "Game Description",
                  "List of Rewards",
                  "Teacher's Page",
                  "Quit"]
    print("-" * 20,
          "\n  ✖️ Math Game ➗")
    print("-" * 20)

    # A loop for iterating through the menu_answers and menu_items
    # list to print the menus options
    for i in range(len(menu_options)):
        print(menu_options[i] + ": " + menu_items[i])
    print("-" * 20)


def game_description():
    """
    Prints the game description (in bullet points)
    """
    space(10000)

    time.sleep(1)
    rules_list = ["\nGame Description: ",
                  "    - This is a math game for kids in grades 2-4 ",
                  "    - You will choose from: ",
                  "         - Easy game  (1-5 multiplication questions)",
                  "         - Hard game  (5-10 multiplication questions)",
                  "         - Mixed game (1-10 multiplication questions)",
                  "    - In each difficulty level you can play a short game "
                  "that has 10 questions, or a long game that has 20 questions",
                  "    - You will earn points from every correctly answered question:",
                  "         - Easy  game: 50 points",
                  "         - Hard  game: 100 points",
                  "         - Mixed game: 75 points",
                  "    - You will lose points if you answer incorrectly:",
                  "         - Easy  game: -40 points",
                  "         - Hard  game: -90 points",
                  "         - Mixed game: -50 points",
                  "    - With these points you can redeem rewards which can "
                  "be viewed through the game rewards page",
                  "    - You can access your past scores through the menu "
                  "to see your performance\n"]

    # For loop prints the list of rules by iterating through the rules_list
    for rule in rules_list:
        print(rule)
        time.sleep(1)

    time.sleep(3)

    options_list = ["Play game", "Return to main menu", "See the rewards"]

    # For loop prints the user's list of navigational options
    for i in range(len(options_list)):
        print(str(i+1) + ": " + options_list[i])
    print("=" * 20)

    gd_page_input = 0

    # While loop takes user to desired page, or asks for a valid input
    while gd_page_input not in menu_options:
        gd_page_input = str(input("> Enter a choice: ")).strip()

        # if input is valid, then takes user to requested page
        if gd_page_input in menu_options:
            if gd_page_input == '1':
                play_game()

            elif gd_page_input == '2':
                menu()

            elif gd_page_input == '3':
                rewards()

        # if input is not valid, then prints a message
        else:
            print("- ⛔️ Sorry, that is not a valid choice.\n")


def rewards():
    """
    Prints the list of rewards (in bullet points)
    """
    space(10000)

    time.sleep(1)
    print("\nGame rewards:")
    time.sleep(0.5)
    rewards_list = ["    - +5% in your next test............15,000 points",
                    "    - Skip 1 class of your choice......20,000 points",
                    "    - +10% in your next test...........27,500 points",
                    "    - Get an early leave pass..........30,000 points",
                    "    - Get 1 day off of school..........50,000 points",
                    "    - Get 1 week off of school.........250,000 points\n"]

    # For loop prints the list of rewards by iterating through the rules_list
    for reward in rewards_list:
        print(reward)
        time.sleep(0.75)

    time.sleep(1)

    options_list = ["Play game",
                    "Return to main menu",
                    "See the rules"]

    # This for loop prints the user's list of navigational options
    for i in range(len(options_list)):
        print(str(i + 1) + ": " + options_list[i])
    print("-" * 20)

    rewards_page_input = 0

    # While loop takes user to desired page, or asks for a valid input
    while rewards_page_input not in menu_options:
        rewards_page_input = str(input("> Enter a choice: ")).strip()

        # if input is valid, then takes user to requested page
        if rewards_page_input in menu_options:
            if rewards_page_input == '1':
                play_game()

            elif rewards_page_input == '2':
                menu()

            elif rewards_page_input == '3':
                game_description()

        # if input is not valid, then prints a message
        else:
            print("- ⛔️ Sorry, that is not a valid choice.\n")


def play_game():
    """
    Displays the play game menu
    """
    space(10000)

    play_game_list = ["Easy game",
                      "Hard game",
                      "Mixed game",
                      "Back to menu",
                      "Quit"]
    print()
    print("-" * 20,
          "\n  Choose game level")
    print("-" * 20)

    # A loop for iterating through the menu_answers and menu_items
    # list to print the menus options
    for i in range(len(play_game_list)):
        print(menu_options[i] + ": " + play_game_list[i])
    print("-" * 20)

    play_game_input = 0

    # While loop takes user to the game menu they want to play or another menu,
    # and gives an error message if input is invalid
    while play_game_input not in menu_options:
        play_game_input = str(input("> Enter a choice: ")).strip()

        # if input is 1, show the easy game menu
        if play_game_input == '1':
            easy_game()

        # if input is 2, show the hard game menu
        elif play_game_input == '2':
            hard_game()

        # if input is 3, show the mixed game menu
        elif play_game_input == '3':
            mixed_game()

        # if input is 4, show the main menu
        elif play_game_input == '4':
            menu()

        # if input is 5, print a message and exit game
        elif play_game_input == '5':
            time.sleep(0.25)
            print("\nThanks for playing!\n")
            time.sleep(1)
            exit()

        # if input is not valid, then prints a message
        else:
            print("- ⛔️ Sorry, that is not a valid choice.\n")
            time.sleep(0.5)


def easy_game():
    """
    Displays the easy game menu
    """
    space(10000)

    # making the easy_game_count and points variables accessible
    global points
    global easy_game_count
    easy_game_count += 1

    game_length_input = choose_game_length_menu()

    easy_game_data[easy_game_count] = []

    correct_answer_count = 0
    # if choice of input is 1, then execute the short game (10 questions)
    if game_length_input == '1':
        space(10000)
        # for loop printing a countdown for game beginning
        for i in range(3):
            print("\rStart in {}".format(3-i), end="")
            time.sleep(1)

        start_time = time.time()

        question_no = 0
        # while loop asks the user multiplication questions 10 times
        while question_no < SHORT_GAME:
            question_no += 1
            space(100)

            # getting the random numbers to multiply
            number_1 = random.randint(1, 5)
            number_2 = random.randint(1, 5)

            # printing question and calculating answer
            print("Question {}.            Points: {}\n".format(question_no, points))
            question = str(input(" " * 12 + str(number_1) + " * " +
                                 str(number_2) + " = ").strip())
            answer = str(number_1 * number_2)

            # if the input number is correct, then adds 1
            # to correct_answer_count and +50 points
            if question == answer:
                correct_answer_count += 1
                points += 50

            # if input number is wrong, then adds 1 to each multiplied
            # number's value in the incorrect_answer_count dictionary
            # and deducts 40 points
            else:
                incorrect_answer_count[number_1] += 1
                incorrect_answer_count[number_2] += 1
                points -= 40

        # calculating the time it took to answer all questions,
        # and the time taken per question
        end_time = time.time()
        duration = round(end_time - start_time, 2)
        average_answer_time = round(duration / SHORT_GAME, 2)

        # adding game data to the easy_game_record dictionary in the following format:
        # {game #: [{number of correct answers: number of questions}, total game duration, duration/question]}
        easy_game_data[easy_game_count].append({correct_answer_count: SHORT_GAME})
        easy_game_data[easy_game_count].append(duration)
        easy_game_data[easy_game_count].append(average_answer_time)

    # if choice of input is 2, then execute the long game (20 questions)
    elif game_length_input == '2':
        space(10000)
        # for loop printing a countdown for game beginning
        for i in range(3):
            print("\rStart in {}".format(3-i), end="")
            time.sleep(1)

        start_time = time.time()

        question_no = 0
        # while loop asks the user multiplication questions 20 times
        while question_no < LONG_GAME:
            question_no += 1
            space(100)

            # getting the random numbers to multiply
            number_1 = random.randint(1, 5)
            number_2 = random.randint(1, 5)

            # printing question and calculating answer
            print("Question {}.            Points: {}\n".format(question_no, points))

            question = str(input(" " * 12 + str(number_1) + " * " +
                                 str(number_2) + " = ").strip())
            answer = str(number_1 * number_2)

            # if the input number is correct, then adds 1
            # to correct_answer_count and +50 points
            if question == answer:
                correct_answer_count += 1
                points += 50

            # if input number is wrong, then adds 1 to each multiplied
            # number's value in the incorrect_answer_count dictionary
            # and deducts 40 points
            else:
                incorrect_answer_count[number_1] += 1
                incorrect_answer_count[number_2] += 1
                points -= 40

        # calculating the time it took to answer all questions,
        # and the time taken per question
        end_time = time.time()
        duration = round(end_time - start_time, 2)
        average_answer_time = round(duration / LONG_GAME, 2)

        # adding game data to the easy_game_record dictionary in the following format:
        # {game number: [{number of correct answers: number of questions}, total game duration, duration/question]}
        easy_game_data[easy_game_count].append({correct_answer_count: LONG_GAME})
        easy_game_data[easy_game_count].append(duration)
        easy_game_data[easy_game_count].append(average_answer_time)

    # if input is not valid, then prints a message
    else:
        print("- ⛔️ Sorry, that is not a valid choice.\n")

    # printing the game score
    space(10000)
    time.sleep(1)

    print("You scored {} out of {}".format(correct_answer_count, easy_game_data[easy_game_count][0][correct_answer_count]))
    time.sleep(1.5)
    print("Total points: {}".format(points))
    time.sleep(1)
    print("You completed the game in {}s".format(duration))
    time.sleep(1.5)
    play_again_menu()


def hard_game():
    """
    Displays the hard game menu
    """
    space(10000)

    # making the hard_game_count and points variables accessible
    global points
    global hard_game_count
    hard_game_count += 1

    game_length_input = choose_game_length_menu()

    hard_game_data[hard_game_count] = []

    correct_answer_count = 0
    # if choice of input is 1, then execute the short game (10 questions)
    if game_length_input == '1':
        space(10000)
        # for loop printing a countdown for game beginning
        for i in range(3):
            print("\rStart in {}".format(3-i), end="")
            time.sleep(1)

        start_time = time.time()

        question_no = 0
        # while loop asks the user multiplication questions 10 times
        while question_no < SHORT_GAME:
            question_no += 1
            space(100)

            # getting the random numbers to multiply
            number_1 = random.randint(5, 10)
            number_2 = random.randint(5, 10)

            # printing question and calculating answer
            print("Question {}.            Points: {}\n".format(question_no, points))
            question = str(input(" " * 12 + str(number_1) + " * " +
                                 str(number_2) + " = ").strip())
            answer = str(number_1 * number_2)

            # if the input number is correct, then adds 1
            # to correct_answer_count and +100 points
            if question == answer:
                correct_answer_count += 1
                points += 100

            # if input number is wrong, then adds 1 to each multiplied
            # number's value in the incorrect_answer_count dictionary
            # and deducts 90 points
            else:
                incorrect_answer_count[number_1] += 1
                incorrect_answer_count[number_2] += 1
                points -= 90

        # calculating the time it took to answer all questions,
        # and the time taken per question
        end_time = time.time()
        duration = round(end_time - start_time, 2)
        average_answer_time = round(duration / SHORT_GAME, 2)

        # adding game data to the hard_game_record dictionary in the following format:
        # {game #: [{number of correct answers: number of questions}, total game duration, duration/question]}
        hard_game_data[hard_game_count].append({correct_answer_count: SHORT_GAME})
        hard_game_data[hard_game_count].append(duration)
        hard_game_data[hard_game_count].append(average_answer_time)

    # if choice of input is 2, then execute the long game (20 questions)
    elif game_length_input == '2':
        space(10000)
        # for loop printing a countdown for game beginning
        for i in range(3):
            print("\rStart in {}".format(3-i), end="")
            time.sleep(1)

        start_time = time.time()

        question_no = 0
        # while loop asks the user multiplication questions 20 times
        while question_no < LONG_GAME:
            question_no += 1
            space(100)

            # getting the random numbers to multiply
            number_1 = random.randint(5, 10)
            number_2 = random.randint(5, 10)

            # printing question and calculating answer
            print("Question {}.            Points: {}\n".format(question_no, points))
            question = str(input(" " * 12 + str(number_1) + " * " +
                                 str(number_2) + " = ").strip())
            answer = str(number_1 * number_2)

            # if the input number is correct, then adds 1
            # to correct_answer_count and +100 points
            if question == answer:
                correct_answer_count += 1
                points += 100

            # if input number is wrong, then adds 1 to each multiplied
            # number's value in the incorrect_answer_count dictionary
            # and deducts 90 points
            else:
                incorrect_answer_count[number_1] += 1
                incorrect_answer_count[number_2] += 1
                points -= 90

        # calculating the time it took to answer all questions,
        # and the time taken per question
        end_time = time.time()
        duration = round(end_time - start_time, 2)
        average_answer_time = round(duration / LONG_GAME, 2)

        # adding game data to the hard_game_record dictionary in the following format:
        # {game number: [{number of correct answers: number of questions}, total game duration, duration/question]}
        hard_game_data[hard_game_count].append({correct_answer_count: LONG_GAME})
        hard_game_data[hard_game_count].append(duration)
        hard_game_data[hard_game_count].append(average_answer_time)

    # if input is not valid, then prints a message
    else:
        print("- ⛔️ Sorry, that is not a valid choice.\n")

    # printing the game score
    space(10000)
    time.sleep(1)

    print("You scored {} out of {}".format(correct_answer_count, hard_game_data[hard_game_count][0][correct_answer_count]))
    time.sleep(1.5)
    print("Total points: {}".format(points))
    time.sleep(1)
    print("You completed the game in {}s".format(duration))
    time.sleep(1.5)

    play_again_menu()


def mixed_game():
    """
    Displays the hard game menu
    """
    space(10000)

    # making the mixed_game_count and points variables accessible
    global points
    global mixed_game_count
    mixed_game_count += 1

    game_length_input = choose_game_length_menu()

    mixed_game_data[mixed_game_count] = []

    correct_answer_count = 0
    # if choice of input is 1, then execute the short game (10 questions)
    if game_length_input == '1':
        space(10000)
        # for loop printing a countdown for game beginning
        for i in range(3):
            print("\rStart in {}".format(3 - i), end="")
            time.sleep(1)

        start_time = time.time()

        question_no = 0
        # while loop asks the user multiplication questions 10 times
        while question_no < SHORT_GAME:
            question_no += 1
            space(100)

            # getting the random numbers to multiply
            number_1 = random.randint(1, 10)
            number_2 = random.randint(1, 10)

            # printing question and calculating answer
            print("Question {}.            Points: {}\n".format(question_no, points))
            question = str(input(" " * 12 + str(number_1) + " * " +
                                 str(number_2) + " = ").strip())
            answer = str(number_1 * number_2)

            # if the input number is correct, then adds 1
            # to correct_answer_count and +75 points
            if question == answer:
                correct_answer_count += 1
                points += 75

            # if input number is wrong, then adds 1 to each multiplied
            # number's value in the incorrect_answer_count dictionary
            # and deducts 50 points
            else:
                incorrect_answer_count[number_1] += 1
                incorrect_answer_count[number_2] += 1
                points -= 50

        # calculating the time it took to answer all questions,
        # and the time taken per question
        end_time = time.time()
        duration = round(end_time - start_time, 2)
        average_answer_time = round(duration / SHORT_GAME, 2)

        # adding game data to the mixed_game_record dictionary in the following format:
        # {game #: [{number of correct answers: number of questions}, total game duration, duration/question]}
        mixed_game_data[mixed_game_count].append({correct_answer_count: SHORT_GAME})
        mixed_game_data[mixed_game_count].append(duration)
        mixed_game_data[mixed_game_count].append(average_answer_time)

    # if choice of input is 2, then execute the long game (20 questions)
    elif game_length_input == '2':
        space(10000)
        # for loop printing a countdown for game beginning
        for i in range(3):
            print("\rStart in {}".format(3 - i), end="")
            time.sleep(1)

        start_time = time.time()

        question_no = 0
        # while loop asks the user multiplication questions 20 times
        while question_no < LONG_GAME:
            question_no += 1
            space(100)

            # getting the random numbers to multiply
            number_1 = random.randint(1, 10)
            number_2 = random.randint(1, 10)

            # printing question and calculating answer
            print("Question {}.            Points: {}\n".format(question_no, points))
            question = str(input(" " * 12 + str(number_1) + " * " +
                                 str(number_2) + " = ").strip())
            answer = str(number_1 * number_2)

            # if the input number is correct, then adds 1
            # to correct_answer_count and +75 points
            if question == answer:
                correct_answer_count += 1
                points += 75

            # if input number is wrong, then adds 1 to each multiplied
            # number's value in the incorrect_answer_count dictionary
            # and deducts 50 points
            else:
                incorrect_answer_count[number_1] += 1
                incorrect_answer_count[number_2] += 1
                points -= 50

        # calculating the time it took to answer all questions,
        # and the time taken per question
        end_time = time.time()
        duration = round(end_time - start_time, 2)
        average_answer_time = round(duration / LONG_GAME, 2)

        # adding game data to the mixed_game_record dictionary in the following format:
        # {game number: [{number of correct answers: number of questions}, total game duration, duration/question]}
        mixed_game_data[mixed_game_count].append({correct_answer_count: LONG_GAME})
        mixed_game_data[mixed_game_count].append(duration)
        mixed_game_data[mixed_game_count].append(average_answer_time)

    # if input is not valid, then prints a message
    else:
        print("- ⛔️ Sorry, that is not a valid choice.\n")

    # printing the game score
    space(10000)
    time.sleep(1)

    print("You scored {} out of {}".format(correct_answer_count, mixed_game_data[mixed_game_count][0][correct_answer_count]))
    time.sleep(1.5)
    print("Total points: {}".format(points))
    time.sleep(1)
    print("You completed the game in {}s".format(duration))
    time.sleep(1.5)

    play_again_menu()


def choose_game_length_menu():
    """
    Displays the "choose game length menu"
    Returns the choice inputted
    """
    print("-" * 20,
          "\n Choose game length")
    print("-" * 20)

    game_choice = ["Short Game (10 Q)",
                   "Long  Game (20 Q)"]

    game_length_menu_options = ['1', '2']

    # For loop prints the menu options by iterating through the game_choice list
    for i in range(len(game_choice)):
        print(game_length_menu_options[i] + ": " + game_choice[i])
    print("-" * 20)

    game_length_input = str(input("> Enter a choice: ")).strip()

    # While loop gives an error message if input is invalid
    while game_length_input not in game_length_menu_options:

        print("- ⛔️ Sorry, that is not a valid choice.\n")
        game_length_input = str(input("> Enter a choice: ")).strip()

    return game_length_input


def play_again_menu():
    """
    Displays the menu asking user if they want to play again or want to
    head back to main menu. Navigates the user accordingly
    """
    play_again_menu_items = ["Play again",
                             "Back to menu"]
    print()
    print("-" * 20)

    # for loop prints the menu asking if the user wants to play again
    # or wants to head back to main menu
    for i in range(len(play_again_menu_items)):
        print(menu_options[i] + ": " + play_again_menu_items[i])
    print("-" * 20)

    play_again_menu_input = 0
    # While loop takes user to the menu page they want to go to
    # and gives an error message is input is invalid
    while play_again_menu_input != '1' or '2':
        play_again_menu_input = str(input("> Enter a choice: ")).strip()

        # if input is 1, then go to the play_game menu
        if play_again_menu_input == '1':
            play_game()
            break

        # if input is 2, then go to the main menu
        elif play_again_menu_input == '2':
            menu()
            break

        # if input is not valid, then prints a message
        else:
            print("- ⛔️ Sorry, that is not a valid choice.\n")
            time.sleep(0.5)


def question_answer_counter(game_record):
    """
    Function takes an input that is the dictionary storing data.
    It calculates the total number of questions answered in a
    particular difficulty level, and the number of those that
    were answered correctly
    """
    game_correct_answer_count = 0
    game_question_count = 0

    # for loop iterates through the data dictionary to calculate the
    # total no. of questions answered (and correctly answered)
    for game_number, value in game_record.items():
        for correct_answer_count, question_count in value[0].items():
            game_correct_answer_count += correct_answer_count
            game_question_count += question_count

    return game_correct_answer_count, game_question_count


def time_played_calculator(game_record):
    """
    Function takes an input that is the dictionary storing data.
    It calculates the total time that the user played a
    particular difficulty level, and the time per question
    """
    total_play_time = 0
    average_answer_time = 0
    game_count = 0

    # for loop iterates through the data dictionary to
    # calculate the values
    for game_number, value in game_record.items():
        total_play_time += value[1]
        average_answer_time += value[2]
        game_count += 1

    average_answer_time = round(average_answer_time / game_count, 2)

    return total_play_time, average_answer_time


def view_other_data_menu():
    """
    Displays the menu asking user if they want to view other data or
    head back to main menu. Navigates the user accordingly
    """
    view_other_data_menu_items = ["View other data",
                                  "Back to main menu"]
    print()
    print("-" * 20)

    # for loop prints the menu asking if the user wants to
    # see other data or head back to main menu
    for i in range(len(view_other_data_menu_items)):
        print(menu_options[i] + ": " + view_other_data_menu_items[i])
    print("-" * 20)

    view_other_data_menu_input = 0
    # While loop takes user to the menu page they want to go to
    # and gives an error message is input is invalid
    while view_other_data_menu_input != '1' or '2':
        view_other_data_menu_input = str(input("> Enter a choice: ")).strip()

        # if input is 1, then go to the play_game menu
        if view_other_data_menu_input == '1':
            teachers_menu()
            break

        # if input is 2, then go to the main menu
        elif view_other_data_menu_input == '2':
            menu()
            break

        # if input is not valid, then prints a message
        else:
            print("- ⛔️ Sorry, that is not a valid choice.\n")
            time.sleep(0.5)


def easy_game_data_display():
    """
    Function displays the easy game menu and data
    """
    space(10000)
    print("-" * 34,
          "\n         Easy Game Data")
    print("-" * 34)

    # fetching values from data dictionary
    easy_game_correct_answer_count, easy_game_question_count = question_answer_counter(easy_game_data)

    # if student has played a single or more easy game,
    # then display data, else display message
    if easy_game_question_count > 0:

        # fetching values form data dictionary
        easy_game_total_play_time, easy_game_average_answer_time = time_played_calculator(easy_game_data)

        easy_game_answer_ratio = round(easy_game_correct_answer_count / easy_game_question_count * 100, 2)

        time.sleep(1)
        print("Total play time:     {}s".format(easy_game_total_play_time))
        time.sleep(1)
        print("Ave. answer time:    {}s\n".format(easy_game_average_answer_time))
        time.sleep(1)
        print("Questions answered:  {} questions".format(easy_game_question_count))
        time.sleep(1)
        print("Correctly answered:  {} questions\n".format(easy_game_correct_answer_count))
        time.sleep(1)
        print("Correct answer rate: {}%".format(easy_game_answer_ratio))
        time.sleep(1)
        print("Total points:        {}".format(points))
        time.sleep(3)
        
        view_other_data_menu()

    else:
        print("There is no data to display")
        time.sleep(3.5)


def hard_game_data_display():
    """
    Function displays the hard game menu and data
    """
    space(10000)
    print("-" * 34,
          "\n          Hard Game Data")
    print("-" * 34)

    # fetching values from hard game data dictionary
    hard_game_correct_answer_count, hard_game_question_count = question_answer_counter(hard_game_data)

    # if student has played a single or more hard game,
    # then display data, else display message
    if hard_game_question_count > 0:

        # fetching values from hard game data dictionary
        hard_game_total_play_time, hard_game_average_answer_time = time_played_calculator(hard_game_data)

        hard_game_answer_ratio = round(hard_game_correct_answer_count / hard_game_question_count * 100, 2)

        time.sleep(1)
        print("Total play time:     {}s".format(hard_game_total_play_time))
        time.sleep(1)
        print("Ave. answer time:    {}s\n".format(hard_game_average_answer_time))
        time.sleep(1)
        print("Questions answered:  {} questions".format(hard_game_question_count))
        time.sleep(1)
        print("Correctly answered:  {} questions\n".format(hard_game_correct_answer_count))
        time.sleep(1)
        print("Correct answer rate: {}%".format(hard_game_answer_ratio))
        time.sleep(1)
        print("Total points:        {}".format(points))
        time.sleep(3)

        view_other_data_menu()

    else:
        print("There is no data to display")
        time.sleep(3.5)


def mixed_game_data_display():
    """
    Function displays the mixed game menu and data
    """
    space(10000)
    print("-" * 34,
          "\n        Mixed Game Data")
    print("-" * 34)

    # fetching values from mixed game data dictionary
    mixed_game_correct_answer_count, mixed_game_question_count = question_answer_counter(mixed_game_data)

    # if student has played a single or more mixed game,
    # then display data, else display message
    if mixed_game_question_count > 0:

        # fetching values from mixed game data dictionary
        mixed_game_total_play_time, mixed_game_average_answer_time = time_played_calculator(mixed_game_data)

        mixed_game_answer_ratio = round(mixed_game_correct_answer_count / mixed_game_question_count * 100, 2)

        time.sleep(1)
        print("Total play time:     {}s".format(mixed_game_total_play_time))
        time.sleep(1)
        print("Ave. answer time:    {}s\n".format(mixed_game_average_answer_time))
        time.sleep(1)
        print("Questions answered:  {} questions".format(mixed_game_question_count))
        time.sleep(1)
        print("Correctly answered:  {} questions\n".format(mixed_game_correct_answer_count))
        time.sleep(1)
        print("Correct answer rate: {}%".format(mixed_game_answer_ratio))
        time.sleep(1)
        print("Total points:        {}".format(points))
        time.sleep(3)

        view_other_data_menu()

    else:
        print("There is no data to display")
        time.sleep(3.5)


def teachers_menu():
    """
    Displays the teacher's menu
    Note that an idea in the code in elif ... == '4':
    is borrowed from the internet:
    https://www.freecodecamp.org/news/sort-dictionary-by-value-in-python/
    """

    space(10000)

    teachers_menu_items = ["Easy game data",
                           "Hard game data",
                           "Mixed game data",
                           "No. of wrong answers",
                           "Main menu"]

    print("-" * 22,
          "\n    Teacher's Menu")
    print("-" * 22)

    # for loop prints the menu asking
    # the user the data they want to view
    for i in range(len(teachers_menu_items)):
        print(menu_options[i] + ": " + teachers_menu_items[i])
    print("-" * 22)

    teachers_menu_input = 0

    # While loop takes user to page showing the data they want to see,
    # and gives an error message is input is invalid
    while teachers_menu_input not in menu_options:
        teachers_menu_input = str(input("> Enter a choice: ")).strip()

        # if input is 1, then display easy game data
        if teachers_menu_input == '1':
            easy_game_data_display()

        # if input is 2, display hard game data
        elif teachers_menu_input == '2':
            hard_game_data_display()

        # if input is 3, then display mixed game data
        elif teachers_menu_input == '3':
            mixed_game_data_display()

        # if input is 4, then go to the main menu
        elif teachers_menu_input == '4':
            space(100)
            # sorting the incorrect_answer_count 
            # dictionary by value in descending order
            # this sorted method is borrowed from the internet:
            # https://www.freecodecamp.org/news/sort-dictionary-by-value-in-python/
            sorted_incorrect_answer_count = sorted(incorrect_answer_count.items(), key=lambda x: x[1], reverse=True)

            # for loop through the sorted dictionary above to 
            # display the keys and values in order (shows the 
            # number of wrong answers for each multiplied number)
            for key, value in sorted_incorrect_answer_count:
                print("x{}:".format(key), " " * (2 - len(str(key))), "{}".format(value) + " " * (3 - len(str(value))),
                      "incorrect answers")
                time.sleep(0.7)

            time.sleep(2)
            view_other_data_menu()

        # if input is 5, then display main menu
        elif teachers_menu_input == '5':
            menu()

        # if input is not valid, then prints a message
        else:
            print("- ⛔️ Sorry, that is not a valid choice.\n")


# Calls the menu function to print the menu, and asks for an input
space(10000)
menu()
menu_input = str(input("> Enter a choice: ")).strip()


# Loop executing code until user inputs "q" for exiting the code
while menu_input != menu_options[-1]:

    # If input from the menu is valid, then executes code accordingly -
    # if not, asks for input again
    if menu_input in menu_options:

        # If input is '1' then calls function to play game
        if menu_input == "1":
            play_game()

        # If input is 2 then calls function to display game description
        elif menu_input == "2":
            game_description()

        # If input is 3 then calls function to display the rewards
        elif menu_input == "3":
            rewards()

        # If input is '4' then calls function to display teacher's menu
        elif menu_input == "4":
            teachers_menu()

    # if input is not valid, then prints a message
    else:
        print("- ⛔️ Sorry, that is not a valid choice.\n")
        time.sleep(1)

    # calls menu function again as long as the while loop continues
    menu()
    menu_input = input("> Enter a choice: ")


print("\nThanks for playing!\n")
